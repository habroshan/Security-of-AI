#!/bin/bash
# Run Model Stealing Attack Demo
# This script runs the model stealing attack demonstration against a local model API

set -e  # Exit immediately if a command exits with a non-zero status

# Colors for better output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Banner
echo -e "${BLUE}"
echo "╔═══════════════════════════════════════════════════════════════════════╗"
echo "║                MODEL STEALING ATTACK DEMONSTRATION                     ║"
echo "║                                                                       ║"
echo "║      Based on CyBOK Security and Privacy of AI Knowledge Guide        ║"
echo "╚═══════════════════════════════════════════════════════════════════════╝"
echo -e "${NC}"

# Check if target server is running
echo -e "${YELLOW}[*] Checking if target model API is running...${NC}"
if ! curl -s http://localhost:5000/info > /dev/null; then
  echo -e "${RED}[!] Target model API is not running at http://localhost:5000${NC}"
  echo -e "${YELLOW}[*] Starting target model server...${NC}"
  
  # Check if deploy.py exists
  if [ ! -f "deploy.py" ]; then
    echo -e "${RED}[!] Error: deploy.py not found${NC}"
    echo -e "${YELLOW}[*] Please make sure the target model server script exists${NC}"
    exit 1
  fi
  
  # Start the server in the background
  python deploy.py > server.log 2>&1 &
  SERVER_PID=$!
  
  # Wait for server to start
  echo -e "${YELLOW}[*] Waiting for server to start...${NC}"
  for i in {1..10}; do
    if curl -s http://localhost:5000/info > /dev/null; then
      echo -e "${GREEN}[+] Target model server started successfully!${NC}"
      break
    fi
    sleep 2
    echo -e "${YELLOW}[*] Still waiting for server to start (attempt $i/10)...${NC}"
  done
  
  if ! curl -s http://localhost:5000/info > /dev/null; then
    echo -e "${RED}[!] Failed to start target model server${NC}"
    echo -e "${YELLOW}[*] Please check server.log for details${NC}"
    exit 1
  fi
else
  echo -e "${GREEN}[+] Target model API is running!${NC}"
fi

# Create output directory
OUTPUT_DIR="results/model_stealing_$(date +%Y%m%d_%H%M%S)"
mkdir -p "$OUTPUT_DIR"
echo -e "${GREEN}[+] Created output directory: $OUTPUT_DIR${NC}"

# Default parameters
SYNTHETIC_SAMPLES=1000
QUERY_BUDGET=3000
EPOCHS=10
VERBOSE=""

# Parse command line arguments
while [[ $# -gt 0 ]]; do
  case $1 in
    --synthetic-samples)
      SYNTHETIC_SAMPLES="$2"
      shift 2
      ;;
    --query-budget)
      QUERY_BUDGET="$2"
      shift 2
      ;;
    --epochs)
      EPOCHS="$2"
      shift 2
      ;;
    --verbose)
      VERBOSE="--verbose"
      shift
      ;;
    *)
      echo -e "${RED}[!] Unknown parameter: $1${NC}"
      echo -e "Usage: $0 [--synthetic-samples N] [--query-budget N] [--epochs N] [--verbose]"
      exit 1
      ;;
  esac
done

# Print attack parameters
echo -e "${BLUE}[*] Attack parameters:${NC}"
echo -e "    - Synthetic samples: $SYNTHETIC_SAMPLES"
echo -e "    - Query budget: $QUERY_BUDGET"
echo -e "    - Training epochs: $EPOCHS"
echo -e "    - Verbose mode: ${VERBOSE:+enabled}"
echo -e "    - Output directory: $OUTPUT_DIR"

# Run the model stealing attack
echo -e "\n${YELLOW}[*] Starting model stealing attack...${NC}"
python model_stealing_attack.py \
  --target-api http://localhost:5000 \
  --output-dir "$OUTPUT_DIR" \
  --synthetic-samples "$SYNTHETIC_SAMPLES" \
  --query-budget "$QUERY_BUDGET" \
  --epochs "$EPOCHS" \
  $VERBOSE

# Check if the attack completed successfully
if [ $? -eq 0 ]; then
  echo -e "\n${GREEN}[+] Attack completed successfully!${NC}"
  echo -e "${BLUE}[*] Results saved to: $OUTPUT_DIR${NC}"
  
  # Show results
  echo -e "\n${YELLOW}[*] Showing key result metrics:${NC}"
  if [ -f "$OUTPUT_DIR/attack_metadata.json" ]; then
    # Extract key metrics using grep and awk
    echo -e "    - Query count: $(grep -o '"query_count": [0-9]*' $OUTPUT_DIR/attack_metadata.json | awk '{print $2}')"
    echo -e "    - Agreement rate: $(grep -o '"agreement_rate": [0-9.]*' $OUTPUT_DIR/attack_metadata.json | awk '{print $2}')"
    echo -e "    - Stolen model accuracy: $(grep -o '"stolen_accuracy": [0-9.]*' $OUTPUT_DIR/attack_metadata.json | awk '{print $2}')"
    echo -e "    - Target model accuracy: $(grep -o '"target_accuracy": [0-9.]*' $OUTPUT_DIR/attack_metadata.json | awk '{print $2}')"
  else
    echo -e "${RED}[!] Results file not found${NC}"
  fi
  
  # Display images if available
  if [ -f "$OUTPUT_DIR/prediction_comparison.png" ]; then
    echo -e "\n${YELLOW}[*] Opening prediction comparison visualization...${NC}"
    if command -v display &> /dev/null; then
      display "$OUTPUT_DIR/prediction_comparison.png" &
    elif command -v open &> /dev/null; then
      open "$OUTPUT_DIR/prediction_comparison.png"
    else
      echo -e "${YELLOW}[*] Prediction comparison saved to: $OUTPUT_DIR/prediction_comparison.png${NC}"
      echo -e "${YELLOW}[*] Open it manually to view the results${NC}"
    fi
  fi
else
  echo -e "\n${RED}[!] Attack failed!${NC}"
  echo -e "${YELLOW}[*] Check the error messages above for details${NC}"
fi

# Stop the server if we started it
if [ -n "$SERVER_PID" ]; then
  echo -e "\n${YELLOW}[*] Stopping target model server...${NC}"
  kill $SERVER_PID
  echo -e "${GREEN}[+] Server stopped${NC}"
fi

echo -e "\n${GREEN}[+] Demo completed${NC}"
