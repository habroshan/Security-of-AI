#!/bin/bash
# Run Evasion Attack Demo - Helper script to demonstrate various attacks and defenses
# Based on the CyBOK Security and Privacy of AI Knowledge Guide

echo "======================================================================"
echo "Evasion Attack Demonstration - AI/ML Security Penetration Testing"
echo "Based on CyBOK Security and Privacy of AI Knowledge Guide"
echo "======================================================================"

# Check if Python 3 is installed
if ! command -v python3 &> /dev/null; then
    echo "Error: Python 3 is required but not found. Please install Python 3."
    exit 1
fi

# Check if required packages are installed
echo "Checking required Python packages..."
REQUIRED_PACKAGES=("tensorflow" "numpy" "matplotlib")
MISSING_PACKAGES=()

for package in "${REQUIRED_PACKAGES[@]}"; do
    if ! python3 -c "import $package" &> /dev/null; then
        MISSING_PACKAGES+=("$package")
    fi
done

if [ ${#MISSING_PACKAGES[@]} -ne 0 ]; then
    echo "Missing required packages: ${MISSING_PACKAGES[*]}"
    echo "Would you like to install them now? (y/n)"
    read answer
    if [ "$answer" == "y" ] || [ "$answer" == "Y" ]; then
        python3 -m pip install "${MISSING_PACKAGES[@]}"
    else
        echo "Cannot proceed without required packages. Exiting."
        exit 1
    fi
fi

# Create directory for results if it doesn't exist
mkdir -p results

# Main menu
show_menu() {
    echo -e "\n======================================================================"
    echo "MAIN MENU"
    echo "======================================================================"
    echo "1. Train a new MNIST model"
    echo "2. Run FGSM Attack Demo"
    echo "3. Run PGD Attack Demo"
    echo "4. Run Defense Comparison Demo"
    echo "5. Exit"
    echo -n "Enter your choice [1-5]: "
}

# Demo functions
train_model() {
    echo -e "\n======================================================================"
    echo "Training a new MNIST model..."
    echo "======================================================================"
    python3 evasion_attack_demo.py --train
}

run_fgsm_demo() {
    echo -e "\n======================================================================"
    echo "Running FGSM Attack Demo..."
    echo "======================================================================"
    echo "This demo will demonstrate the Fast Gradient Sign Method (FGSM) attack"
    echo "and implement adversarial training as a defense."
    echo -e "\nSelect epsilon value for the attack:"
    echo "1. Low (ε=0.05) - Subtle perturbations"
    echo "2. Medium (ε=0.1) - Moderate perturbations"
    echo "3. High (ε=0.2) - Strong perturbations"
    echo -n "Enter your choice [1-3]: "
    read epsilon_choice
    
    case $epsilon_choice in
        1) epsilon=0.05 ;;
        2) epsilon=0.1 ;;
        3) epsilon=0.2 ;;
        *) epsilon=0.1 ;;
    esac
    
    echo -e "\nSelect defense type:"
    echo "1. Adversarial Training"
    echo "2. Input Preprocessing"
    echo "3. Gradient Masking"
    echo -n "Enter your choice [1-3]: "
    read defense_choice
    
    case $defense_choice in
        1) defense="adversarial_training" ;;
        2) defense="input_preprocessing" ;;
        3) defense="gradient_masking" ;;
        *) defense="adversarial_training" ;;
    esac
    
    echo -e "\nRunning FGSM attack with ε=$epsilon and $defense defense..."
    python3 evasion_attack_demo.py --attack fgsm --epsilon $epsilon --defense $defense
}

run_pgd_demo() {
    echo -e "\n======================================================================"
    echo "Running PGD Attack Demo..."
    echo "======================================================================"
    echo "This demo will demonstrate the Projected Gradient Descent (PGD) attack,"
    echo "which is more powerful than FGSM, and implement a defense."
    echo -e "\nSelect epsilon value for the attack:"
    echo "1. Low (ε=0.05) - Subtle perturbations"
    echo "2. Medium (ε=0.1) - Moderate perturbations"
    echo "3. High (ε=0.2) - Strong perturbations"
    echo -n "Enter your choice [1-3]: "
    read epsilon_choice
    
    case $epsilon_choice in
        1) epsilon=0.05 ;;
        2) epsilon=0.1 ;;
        3) epsilon=0.2 ;;
        *) epsilon=0.1 ;;
    esac
    
    echo -e "\nSelect defense type:"
    echo "1. Adversarial Training"
    echo "2. Input Preprocessing"
    echo "3. Gradient Masking"
    echo -n "Enter your choice [1-3]: "
    read defense_choice
    
    case $defense_choice in
        1) defense="adversarial_training" ;;
        2) defense="input_preprocessing" ;;
        3) defense="gradient_masking" ;;
        *) defense="adversarial_training" ;;
    esac
    
    echo -e "\nRunning PGD attack with ε=$epsilon and $defense defense..."
    python3 evasion_attack_demo.py --attack pgd --epsilon $epsilon --defense $defense
}

run_defense_comparison() {
    echo -e "\n======================================================================"
    echo "Running Defense Comparison Demo..."
    echo "======================================================================"
    echo "This demo will compare all defense types against both FGSM and PGD attacks."
    echo -e "\nSelect epsilon value for the attacks:"
    echo "1. Low (ε=0.05) - Subtle perturbations"
    echo "2. Medium (ε=0.1) - Moderate perturbations"
    echo "3. High (ε=0.2) - Strong perturbations"
    echo -n "Enter your choice [1-3]: "
    read epsilon_choice
    
    case $epsilon_choice in
        1) epsilon=0.05 ;;
        2) epsilon=0.1 ;;
        3) epsilon=0.2 ;;
        *) epsilon=0.1 ;;
    esac
    
    echo -e "\nRunning comparison with ε=$epsilon..."
    
    echo -e "\n1. Testing adversarial training against FGSM..."
    python3 evasion_attack_demo.py --attack fgsm --epsilon $epsilon --defense adversarial_training
    
    echo -e "\n2. Testing input preprocessing against FGSM..."
    python3 evasion_attack_demo.py --attack fgsm --epsilon $epsilon --defense input_preprocessing
    
    echo -e "\n3. Testing gradient masking against FGSM..."
    python3 evasion_attack_demo.py --attack fgsm --epsilon $epsilon --defense gradient_masking
    
    echo -e "\n4. Testing adversarial training against PGD..."
    python3 evasion_attack_demo.py --attack pgd --epsilon $epsilon --defense adversarial_training
    
    echo -e "\n5. Testing input preprocessing against PGD..."
    python3 evasion_attack_demo.py --attack pgd --epsilon $epsilon --defense input_preprocessing
    
    echo -e "\n6. Testing gradient masking against PGD..."
    python3 evasion_attack_demo.py --attack pgd --epsilon $epsilon --defense gradient_masking
    
    echo -e "\nComparison completed. Check the results directory for detailed output."
}

# Main program loop
while true; do
    show_menu
    read choice
    
    case $choice in
        1) train_model ;;
        2) run_fgsm_demo ;;
        3) run_pgd_demo ;;
        4) run_defense_comparison ;;
        5) echo "Exiting..."; exit 0 ;;
        *) echo "Invalid choice. Please try again." ;;
    esac
    
    echo -e "\nPress Enter to continue..."
    read
done
